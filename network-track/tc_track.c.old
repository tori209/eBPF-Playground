// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
/* Copyright (c) 2022 Hengqi Chen */

/**
 * !주의
 * !Cilium이 TCX 프로그램을 사용하여 패킷을 검증하는 탓에, TC로 접근하는 방법이 아예 막혀버렸다.
 * !그러한 이유로, XDP를 통해 접근해야 한다. 안그러면, 패킷 캡처링 자체가 안된다.
 * !이거 몰라서 개고생했다. 아오 십새야 
 */

#include <signal.h>
#include <unistd.h>
#include <net/if.h>
#include <bpf/libbpf.h>
#include "tc_track.skel.h"
#include "tc_track.h"

#define LO_IFINDEX 1

static volatile sig_atomic_t exiting = 0;

static void sig_int(int signo)
{
	exiting = 1;
}

static void ip_addr_parser(__u8 * ip_buf, __u32 raw_ip) {
	int idx = 0;
	memset(ip_buf, 0, 4);
	for (; raw_ip > 0 && idx < 4; idx++) {
		ip_buf[idx] = raw_ip % 256U;
		raw_ip = raw_ip >> 8U;
	}
	return;
}

static int libbpf_print_fn(enum libbpf_print_level level, const char *format, va_list args)
{
	return vfprintf(stderr, format, args);
}

static int log_handler(void *ctx, void *data, size_t size) {
	struct ip_event *event = data;
	__u8 src_ip[4], dst_ip[4];

	ip_addr_parser(src_ip, event->src_ip);
	ip_addr_parser(dst_ip, event->dst_ip);

	printf("Packet: src_ip=%u.%u.%u.%u, dst_ip=%u.%u.%u.%u, protocol=%u\n", 
		src_ip[0], src_ip[1], src_ip[2], src_ip[3],
		dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3],
		event->protocol);
 	return 0;
}

//-------------------------[MAIN]---------------------------------

int main(int argc, char **argv)
{
	unsigned int net_ifindex; 
	
	if (argc < 0) {
		fprintf(stderr, "USAGE: %s [netif]", argv[0]);
		return -1;
	}
	net_ifindex = if_nametoindex(argv[1]);
	if (!net_ifindex) {
        perror("if_nametoindex");
        return 1;
    }

	// Hooking 지점.
	DECLARE_LIBBPF_OPTS(bpf_tc_hook, tc_hook, .ifindex = net_ifindex, // LO_IFINDEX,
			    .attach_point = BPF_TC_INGRESS);
	DECLARE_LIBBPF_OPTS(bpf_tc_opts, tc_opts, .handle = 1, .priority = 0);
	bool hook_created = false;
	struct tc_track_bpf *skel;
	struct ring_buffer *rb;
	int err;

	libbpf_set_print(libbpf_print_fn);

	// eBPF 프로그램을 Skeleton으로 만들었을 때, 이를 가져오는 것.
	skel = tc_track_bpf__open_and_load();
	if (!skel) {
		fprintf(stderr, "Failed to open BPF skeleton\n");
		return 1;
	}

	/* The hook (i.e. qdisc) may already exists because:
	 *   1. it is created by other processes or users
	 *   2. or since we are attaching to the TC ingress ONLY,
	 *      bpf_tc_hook_destroy does NOT really remove the qdisc,
	 *      there may be an egress filter on the qdisc
	 */

	// TC Hook 지점 정의
	err = bpf_tc_hook_create(&tc_hook);
	if (!err)
		hook_created = true;
	if (err && err != -EEXIST) {
		fprintf(stderr, "Failed to create TC hook: %d\n", err);
		goto cleanup;
	}

	// TC Program 부착
	tc_opts.prog_fd = bpf_program__fd(skel->progs.tc_ingress);
	err = bpf_tc_attach(&tc_hook, &tc_opts);
	if (err) {
		fprintf(stderr, "Failed to attach TC: %d\n", err);
		perror("bpf_tc_attach");
		goto cleanup;
	}

	// Ring Buffer 생성
	rb = ring_buffer__new(bpf_map__fd(skel->maps.log_map), log_handler, NULL, NULL);
	if (!rb) {
        fprintf(stderr, "Failed to create ring buffer\n");
        return 1;
	}

	if (signal(SIGINT, sig_int) == SIG_ERR) {
		err = errno;
		fprintf(stderr, "Can't set signal handler: %s\n", strerror(errno));
		goto cleanup;
	}

	printf("Successfully started.\n");

	// Working Area
	// Stop when Ctrl+C occured
	while (!exiting) {
		ring_buffer__poll(rb, -1);
		fprintf(stdout, ".");
	}

	tc_opts.flags = tc_opts.prog_fd = tc_opts.prog_id = 0;
	err = bpf_tc_detach(&tc_hook, &tc_opts);
	if (err) {
		fprintf(stderr, "Failed to detach TC: %d\n", err);
		goto cleanup;
	}

cleanup:
	printf("Try to Finish Program. Clean-Up Procedure begins.\n");
	if (hook_created)
		bpf_tc_hook_destroy(&tc_hook);
	tc_track_bpf__destroy(skel);

	// Ring Buffer 해제
	ring_buffer__free(rb);

	printf("Clean Up Finished.\n");
	return -err;
}
